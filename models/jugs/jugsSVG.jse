/* if the user re-includes this file to reset the model, we don't want
the display to be re-generated after every redefinition made by this
file, so turn autocalc off for the time being */

autocalc = 0;

func max { return $1<$2 ? $2 : $1; };

target=4;
capA = 3;
capB = 5;
Afull is capA==contentA;
Bfull is capB==contentB;
contentA = 0;
contentB = 0;

height is max(capA,capB)+2;

widthB = 5;
widthA = 5;
menu is ["1:Fill A","2:Fill B","3:Empty A","4:Empty B","5:Pour"];
menustatus is [valid1, valid2, valid3, valid4, valid5, valid6, valid7];
				/* two invisible options 6 & 7 */
valid1 is !Afull;
valid2 is !Bfull;
valid3 is contentA != 0;
valid4 is contentB != 0;
valid5 is valid6 || valid7;
valid6 is valid3 && valid2;
valid7 is valid4 && valid1;

/* specifying the control information */

Error=0; updating=0;
finish is ((contentA==target)||(contentB==target))&&!updating;

func avail
{
	/* indicates whether the menu option with parameter $1 is open */
	auto t;
	t = menustatus[$1];
	return t;
}


proc init_pour : input
{
        updating = 1;
	if (int(input) == 5)	{
		content5 = contentA + contentB;
		contentB is content5 - contentA;
		option = valid6 ? 6 : 7;
	} else
		option = int(input);
	step = 0;
}
 
proc pour :  step
{
	if (avail(option)) {
		switch (option) {
		case 1:
			contentA = contentA + 1;
			break;
		case 2:
			contentB = contentB + 1;
			break;
		case 3:
			contentA = contentA - 1;
			break;
		case 4:
			contentB = contentB - 1;
			break;
		case 6:
			contentA = contentA - 1;
			break;
		case 7:
			contentA = contentA + 1;
			break;
		default:
			writeln("option = ", option);
			return;
		}

		after (viscosity) {
			step++;
		}
	} else {
                contentA = contentA;
                contentB = contentB;
                updating = 0;
        }
}

status is (Error)?"invalid option": ((updating)?"updating":"awaiting input");
totstat is (finish) ? "Success!" : status;
targ is ("Target is " // str(target) // " : ");


viscosity = 100;

autocalc = 1;

active_tab = "canvas";

jugwidth = 60;
base = 200;
scale = 20;
left = 50;

jugA_left is Line(left,base,left,base - (scale * capA),"black",2);
jugA_right is Line(left+jugwidth,base,left+jugwidth,base - (scale * capA),"black",2);
jugA_base is Line(left,base,left+jugwidth,base,"black",2);

##picture is [jugA_left,jugA_right,jugA_base];

spacing = 30;
right is left+jugwidth+spacing;

jugB_left is Line(right,base,right,base - (scale * capB),"black",2);
jugB_right is Line(right+jugwidth,base,right+jugwidth,base - (scale * capB),"black",2);
jugB_base is Line(right,base,right+jugwidth,base,"black",2);

##picture is [jugA_left,jugA_right,jugA_base,jugB_left,jugB_right,jugB_base];

linewidth = 0;

jugA_water is Rectangle(left+linewidth,base - (scale * contentA),0,0,jugwidth-(2*linewidth),scale * contentA,"fill:blue;opacity:0.40");

##picture is [jugA_left,jugA_right,jugA_base,jugB_left,jugB_right,jugB_base,jugA_water];

jugB_water is Rectangle(right+linewidth,base - (scale * contentB),0,0,jugwidth-(2*linewidth),scale * contentB,"fill:blue;opacity:0.40");

##picture is [jugA_left,jugA_right,jugA_base,jugB_left,jugB_right,jugB_base,jugA_water,jugB_water];

statuslabel is Text(250, base - ((capB * scale) / 2), targ // " " // totstat, "Verdana", 15, "black");

##picture is [jugA_left,jugA_right,jugA_base,jugB_left,jugB_right,jugB_base,jugA_water,jugB_water,statuslabel];

but1 is Button("but1",menu[1], 50, base+30, valid1);
but2 is Button("but2",menu[2], 50+70, base+30, valid2);
but3 is Button("but3",menu[3], 50+150, base+30, valid3);
but4 is Button("but4",menu[4], 50+250, base+30, valid4);
but5 is Button("but5",menu[5], 50+340, base+30, valid5);

proc but1agent : but1_clicked {
  if (but1_clicked == true) {
    input = 1;
  }
}

proc but2agent : but2_clicked {
  if (but2_clicked == true) {
    input = 2;
  }
}

proc but3agent : but3_clicked {
  if (but3_clicked == true) {
    input = 3;
  }
}

proc but4agent : but4_clicked {
  if (but4_clicked == true) {
    input = 4;
  }
}

proc but5agent : but5_clicked {
  if (but5_clicked == true) {
    input = 5;
  }
}

picture is [but1,but2,but3,but4,but5,jugA_left,jugA_right,jugA_base,jugB_left,jugB_right,jugB_base,jugA_water,jugB_water,statuslabel];
