/*** SVG Based Drawing Library ***/
/*	redefinition of emile variant drawables and introduction of new drawables
	and geometric components. These drawables and geometric components permit
	more accurate observable representation while maintaining their dependencies.
	SMIL based/JQuery animation engine represents the agency of OD's in particular
	contexts more accurately than they otherwise would have been represented.
		
	Additional Library Development:
	- automated SMIL functions
	- co-ordinate systems
	- path construct with marker optiosn
	- multi-language text grouping
	- export function of current state.
	- styles inset function.
	- additional input triggers
	
*/

/**
 * Line function defines a line with colour and strokewidth
 *
 * @param x1, starting x-coordinate
 * @param y1, starting y-coordinate
 * @param x2, end x-coordinate
 * @param y2, end y-coordinate
 * @param colour, end x-coordinate
 * @param strokewidth, end y-coordinate
 */

${{
Line = function(x1, y1, x2, y2, colour, strokewidth) {
  this.x1 = x1;
  this.y1 = y1;
  this.x2 = x2;
  this.y2 = y2;
  this.colour = colour;
  this.strokewidth = strokewidth
}
}}$;

func Line { ${{
  var x1 = arguments[0];
  var y1 = arguments[1];
  var x2 = arguments[2];
  var y2 = arguments[3];
  var colour = arguments[4];
  var strokewidth=arguments[5];
  if (colour === undefined) { colour = "black"; }
  return new Line(x1, y1, x2, y2, colour, strokewidth);
}}$; };

${{
Line.prototype.draw = function(id) {

  //grab svg canvas
  var contentarea = document.getElementById("svgcanvas");  
		
	//If line previously exists, set it's attributes
	
	if(contentarea.getElementById(id)) {
  		//update existing
  		var l1 = contentarea.getElementById(id);
  		l1.setAttribute("x1", this.x1);
  		l1.setAttribute("y1", this.y1);
  		l1.setAttribute("x2", this.x2);
  		l1.setAttribute("y2", this.y2);
  		l1.setAttribute("stroke", this.colour);
  		l1.setAttribute("stroke-width", this.strokewidth);
  		
  	//If line does not exist, create new element and set it's attributes
  	} else {
  		//delete any not referenced/create new references 
  		var l1 = document.createElementNS("http://www.w3.org/2000/svg", "line");
  		l1.setAttribute("id", id);
  		l1.setAttribute("x1", this.x1);
  		l1.setAttribute("y1", this.y1);
  		l1.setAttribute("x2", this.x2);
  		l1.setAttribute("y2", this.y2);
  		l1.setAttribute("stroke", this.colour);
  		l1.setAttribute("stroke-width", this.strokewidth);

		//append created element to child
		
  		contentarea.appendChild(l1);	
  	}
  	
  	 var me = contentarea.getElementById(id);
  	 var me2 = id;
  	 
  	 assignTriggers(me, me2);

};
}}$;

${{
Line.prototype.toString = function() {
  return "Line(" + this.x1 + ", " + this.y1 + ", " + this.x2 + ", "+this.y2+", "+this.colour+", " +this.strokewidth+")";
};
}}$;

/**
 * Point function defines a Point
 *
 * @param x, x-coordinate
 * @param y, starting y-coordinate
 */

${{
Point = function(x, y) {
  this.x = x;
  this.y = y;
}
}}$;

func Point { ${{
  var x = arguments[0];
  var y = arguments[1];
  return new Point(x, y);
}}$; };

${{
Point.prototype.draw = function(id) {
    var contentarea = document.getElementById("svgcanvas");  
  
  	if(contentarea.getElementById(id)) {
  		//update existing
  		var c1 = contentarea.getElementById(id);
  		c1.setAttribute("cx", this.x);
  		c1.setAttribute("cy", this.y);
  		c1.setAttribute("r", 2.5);
  		c1.setAttribute("fill", "black");
  		c1.setAttribute("stroke", "black");
  	} else {
  		//delete any not referenced/create new references  		
  		var c1 = document.createElementNS("http://www.w3.org/2000/svg", "circle");
  		c1.setAttribute("id", id);
  		c1.setAttribute("cx", this.x);
  		c1.setAttribute("cy", this.y);
  		c1.setAttribute("r", 2.5);
  		c1.setAttribute("fill", "black");
  		c1.setAttribute("stroke", "black");

  		contentarea.appendChild(c1);
  		
  	}
  	
  	 var me = contentarea.getElementById(id);
  	 var me2 = id;
  	 
  	 assignTriggers(me, me2);
  	
};
}}$;

${{
Point.prototype.toString = function() {
  return "{" + this.x + ", " + this.y + "}";
};
}}$;

/**
 * Rectangle function defines rectangle with rounding and style
 *
 * @param x, x-coordinate
 * @param y, y-coordinate
 * @param rx, rounding of rectangle based on x axis
 * @param ry, rounding of rectangle based on y axis
 * @param width, starting y-coordinate
 * @param height, starting y-coordinate
 * @param style, styling
 */
 
${{
Rectangle = function(x, y, rx, ry, width, height, style) {
  this.x = x;
  this.y = y;
  this.rx = rx;
  this.ry = ry;
  this.width = width;
  this.height = height;
  this.style = style;
}
}}$;

func Rectangle { ${{
  var x = arguments[0];
  var y = arguments[1];
  var rx = arguments[2];
  var ry = arguments[3];
  var width = arguments[4];
  var height = arguments[5];
  var style = arguments[6];
  return new Rectangle(x, y, rx, ry, width, height, style);
}}$; };

${{
Rectangle.prototype.draw = function(id) {

  var contentarea = document.getElementById("svgcanvas");  
  
  	if(contentarea.getElementById(id)) {
  		//update existing
  		var r1 = contentarea.getElementById(id);
  		r1.setAttribute("x", this.x);
  		r1.setAttribute("y", this.y);
  		r1.setAttribute("rx", this.rx);
  		r1.setAttribute("ry", this.ry);
  		r1.setAttribute("width", this.width);
  		r1.setAttribute("height", this.height);
  		r1.setAttribute("style", this.style);
  		
  	} else {
  		//delete any not referenced/create new references 
  		var r1 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
  		r1.setAttribute("id", id);
  		r1.setAttribute("x", this.x);
  		r1.setAttribute("y", this.y);
  		r1.setAttribute("rx", this.rx);
  		r1.setAttribute("ry", this.ry);
  		r1.setAttribute("width", this.width);
  		r1.setAttribute("height", this.height);
  		r1.setAttribute("style", this.style);

  		contentarea.appendChild(r1);	
  	}
	
	 var me = contentarea.getElementById(id);
  	 var me2 = id;
  	 
  	 //assign event triggers to svg object.
  	 assignTriggers(me, me2);

};
}}$;

${{
Rectangle.prototype.toString = function() {
  return "Rectangle(" + this.x + ", " + this.y + ", " + this.rx + ", "+this.ry+", "+this.width+", "+this.height+", "+this.style+")";
};
}}$;

/**
 * Polygon function defines rectangle with rounding and style
 *
 * @param x, x-coordinate
 * @param y, y-coordinate
 * @param points, points of the polygon
 * @param style, style to be applied to the polygon
 */
 
${{
Polygon = function(x, y, points, style) {
  this.x = x;
  this.y = y;
  this.points = points;
  this.style = style;
}
}}$;

func Polygon { ${{
  var x = arguments[0];
  var y = arguments[1];
  var points = arguments[2];
  var style = arguments[3];
  if (style === undefined) { style = "fill:white"; }
  return new Polygon(x,y,points, style);
}}$; };

${{
Polygon.prototype.draw = function(id) {
	
	//grab svg canvas
    var contentarea = document.getElementById("svgcanvas");  
  
  	 
  	if(contentarea.getElementById(id+"g")) {
  		
  		//update existing group identifier of the polygon
  		
  		var r1 = contentarea.getElementById(id);
  		var g1 = contentarea.getElementById(id+"g");
  		
  		//x,y locations based on translation - no x,y attributes in the group construct.
  		
  		g1.setAttribute("transform", "translate("+this.x+","+this.y+")");
  		r1.setAttribute("points", this.points);
  		r1.setAttribute("style", this.style);
  		
  	} else {
  	
  		//delete any not referenced/create new references 
  		var r1 = document.createElementNS("http://www.w3.org/2000/svg", "polygon");
  		var g1 = document.createElementNS("http://www.w3.org/2000/svg", "g");
  		g1.setAttribute("id", id+"g");
  		g1.setAttribute("transform", "translate("+this.x+","+this.y+")");
  		r1.setAttribute("id", id);
  		r1.setAttribute("points", this.points);
  		r1.setAttribute("style", this.style);

		//append points of the polygon to a grouping
		g1.appendChild(r1);
  		
  		//append group to the canvas area.
  		contentarea.appendChild(g1);	
  	}
  	
  	 var me = contentarea.getElementById(id+"g");
  	 var me2 = id+"g";
  	 
  	 //assign event triggers to svg object.
  	 assignTriggers(me, me2);
};
}}$;

${{
Polygon.prototype.toString = function() {
  return "Polygon("+ this.x + ", " + this.y + ", " + this.points + ", " + this.style +")";
};
}}$;

/**
 * Circle function defines rectangle with rounding and style
 *
 * @param x, x-coordinate
 * @param y, y-coordinate
 * @param radius, radius of the circle
 * @param fillcolour, fill colour of the circle
 * @param outlinecolour, outline colour of the circle
 */

${{
Circle = function(x, y, radius, fillcolour, outlinecolour) {
  this.x = x;
  this.y = y;
  this.radius = radius;
  this.fillcolour = fillcolour;
  this.outlinecolour = outlinecolour;
}
}}$;

func Circle { ${{
  var x = arguments[0];
  var y = arguments[1];
  var radius = arguments[2];
  var fillcolour = arguments[3];
  var outlinecolour = arguments[4];
  if (fillcolour == null) { fillcolour = "black"; }
  if (outlinecolour == null) { outlinecolour = "black"; }
  return new Circle(x, y, radius, fillcolour, outlinecolour);
}}$; };

${{
Circle.prototype.draw = function(id) {
  
  var contentarea = document.getElementById("svgcanvas");  
  
  	if(contentarea.getElementById(id)) {
  		//update existing
  		var c1 = contentarea.getElementById(id);
  		c1.setAttribute("cx", this.x);
  		c1.setAttribute("cy", this.y);
  		c1.setAttribute("r", this.radius);
  		c1.setAttribute("fill", this.fillcolour);
  		c1.setAttribute("stroke", this.outlinecolour);
  	} else {
  		//delete any not referenced/create new references  		
  		var c1 = document.createElementNS("http://www.w3.org/2000/svg", "circle");
  		c1.setAttribute("id", id);
  		c1.setAttribute("cx", this.x);
  		c1.setAttribute("cy", this.y);
  		c1.setAttribute("r", this.radius);
  		c1.setAttribute("fill", this.fillcolour);
  		c1.setAttribute("stroke", this.outlinecolour);

  		contentarea.appendChild(c1);
  		
  	}
  	
  	 var me = contentarea.getElementById(id);
  	 var me2 = id;
  
  	 //assign event triggers to svg object.
  	 assignTriggers(me, me2);
  	 
};
}}$;

${{
Circle.prototype.toString = function() {
  return "Circle(" + this.x + ", " + this.y + ", " + this.radius + ", "+this.fillcolour+", "+this.outlinecolour+")";
};
}}$;

/**
 * Text function defines text with font, size and colouring
 *
 * @param x, x-coordinate
 * @param y, y-coordinate
 * @param text, the text
 * @param font, font face of the text
 * @param size, size of the text
 * @param colour, colour of the text
 */


${{
Text = function(x, y, text, font, size, colour) {
  this.x = x;
  this.y = y;
  this.text = text;
  this.font = font;
  this.size = size;
  this.colour = colour
}
}}$;

func Text { ${{
  var x = arguments[0];
  var y = arguments[1];
  var text = arguments[2];
  var font = arguments[3];
  var size = arguments[4];
  var colour = arguments[5];
  if (colour == null) { colour = "black"; }
  return new Text(x, y, text, font, size, colour);
}}$; };

${{
Text.prototype.draw = function(id) {

  //grab svg canvas
  var contentarea = document.getElementById("svgcanvas");  

  //grab text based on it's grouping.
  if(contentarea.getElementById(id+"g")) {
  
  		//assign font attributes to group tag
  		var g1 = contentarea.getElementById(id+"g");
  		g1.setAttribute("font-family", this.font);
  		g1.setAttribute("font-size", this.size);
  			  		
  		//text g tags only have 1 child so grab the first child and set remaining attributes
		var t1 = g1.childNodes[0];
		t1.setAttribute("x", this.x);
  		t1.setAttribute("y", this.y);
  		t1.setAttribute("fill", this.colour);
  		t1.textContent = this.text;


  } else {
  		
    	//delete any not referenced/create new references  	
  		var t1 = document.createElementNS("http://www.w3.org/2000/svg", "text");
  		var g1 = document.createElementNS("http://www.w3.org/2000/svg", "g");
  		//set g attributes
  		g1.setAttribute("id", id+"g");
  		g1.setAttribute("font-family", this.font);
  		g1.setAttribute("font-size", this.size);
  		//set t attributes
  		t1.setAttribute("id", id);
  		t1.setAttribute("x", this.x);
  		t1.setAttribute("y", this.y);
  		t1.setAttribute("fill", this.colour);
  		//set t content and check for tspans (tbd)
  		t1.textContent = this.text;

  		g1.appendChild(t1);
  		contentarea.appendChild(g1);
  }

};
}}$;

${{
Text.prototype.toString = function() {
  return "Text(" + this.x + ", " + this.y + ", '" + this.text + "', "+this.font+ ", '" + this.size + "', '" + this.colour + "')";
};
}}$;

/**
 * Path function defines start and end observables, markers and stylings
 *
 * @param name, name of path
 * @param start, start of path by observable name
 * @param end, end of path by observable name
 * @param marker, include arrow head (true) or not (false)
 * @param fill, colour of the path
 * @param stroke, stroke of the path
 * @param props, unidirectional (start/end) or bidirectional (both)
 */


${{
Path = function (name, start, end, marker, fill, stroke, props) {
	this.name = name;
	this.start = start;
	this.end = end;
	this.marker = marker;
	this.fill = fill;
	this.stroke = stroke;
	this.props = props;
}
}}$;

func Path {${{
  var name = arguments[0];
  var start = arguments[1];
  var end = arguments[2];
  var marker = arguments[3];
  var fill = arguments[4];
  var stroke = arguments[5];
  var props = arguments[6];
  return new Path(name, start, end, marker, fill, stroke, props);
}}$; }

${{
Path.prototype.draw = function(id) {
	//insert svg element into the environment

	var contentarea = document.getElementById("svgcanvas");
	var node1 = contentarea.getElementById(this.start);
	var node2 = contentarea.getElementById(this.end);

	//different cases for different svg shapes, c* for circles, * for everything else

	if (document.getElementById(id+"g")) {
	
	//get existing path and update attributes
	var p1 = document.getElementById(id+"g");
	
	//update according to new references
	if(node1.getAttribute("cx")!=null) {
	
		var node1x = parseInt(node1.getAttribute("cx"));
		var node1y = parseInt(node1.getAttribute("cy"));
		
		if(node2.getAttribute("cy")!=null) {
		
			var node2x = parseInt(node2.getAttribute("cx"));
			var node2y = parseInt(node2.getAttribute("cy"));
			
		} else { 
		
			var node2x = parseInt(node2.getAttribute("x")) + (parseInt(node2.getAttribute("width"))/2);
  	 		var node2y = parseInt(node2.getAttribute("y")) + (parseInt(node2.getAttribute("height"))/2);	
		}
		
	} else {
	
		var node1x = parseInt(node1.getAttribute("x")) + (parseInt(node1.getAttribute("width"))/2);
   		var node1y = parseInt(node1.getAttribute("y")) + (parseInt(node1.getAttribute("height"))/2);
	
	}
	
	//setup and update path parameters
	//update text
	var t1 = p1.childNodes[1];
	t1.setAttribute("x", parseInt(node1x)+parseInt(((node2x-node1x)/2))); 
	t1.setAttribute("y", parseInt(node1y)+parseInt(((node2y-node1y)/2))); 
	t1.setAttribute("fill", "black");
	t1.textContent = this.name;
	
	//update path
	var p1 = p1.childNodes[2];
	p1.setAttribute("id",this.name);
	p1.setAttribute("d", "M " + node1x + " " + node1y + " L " + node2x + " " + node2y);
	p1.setAttribute("stroke", this.stroke);
	p1.setAttribute("stroke-width", 3);

} else {

	//set location of path based on the co-ordinates of the referenced observables.
	//these location parameters differ based on the shape.

	if(node1.getAttribute("cx")!=null) {
	
		var node1x = parseInt(node1.getAttribute("cx"));
		var node1y = parseInt(node1.getAttribute("cy"));
		
		if(node2.getAttribute("cy")!=null) {
		
			var node2x = parseInt(node2.getAttribute("cx"));
			var node2y = parseInt(node2.getAttribute("cy"));
			
		} else { 
		
			var node2x = parseInt(node2.getAttribute("x")) + (parseInt(node2.getAttribute("width"))/2);
  	 		var node2y = parseInt(node2.getAttribute("y")) + (parseInt(node2.getAttribute("height"))/2);	
		}
		
	} else {
	
		var node1x = parseInt(node1.getAttribute("x")) + (parseInt(node1.getAttribute("width"))/2);
   		var node1y = parseInt(node1.getAttribute("y")) + (parseInt(node1.getAttribute("height"))/2);
	
	}
	
	//instantiate new definition for the marker 
	var d1 = document.createElementNS("http://www.w3.org/2000/svg", "defs");
	var m1 = document.createElementNS("http://www.w3.org/2000/svg", "marker");
	//instantiate new definition for the path
	var c1 = document.createElementNS("http://www.w3.org/2000/svg", "path");
	//instantiate new text and group definition for the path
	var t1 = document.createElementNS("http://www.w3.org/2000/svg", "text");
	var g1 = document.createElementNS("http://www.w3.org/2000/svg", "g");


	//set styling and positioning for the text and path elements
	t1.setAttribute("x", parseInt(node1x)+parseInt(((node2x-node1x)/2))); 
	t1.setAttribute("y", parseInt(node1y)+parseInt(((node2y-node1y)/2))); 
	t1.setAttribute("fill", "black");
	t1.textContent = this.name;

	c1.setAttribute("id",this.name);
	c1.setAttribute("d", "M " + node1x + " " + node1y + " L " + node2x + " " + node2y);
	c1.setAttribute("stroke", this.stroke);
	c1.setAttribute("stroke-width", 3);

	//creation of the marker based on observable values
	if (this.marker=="true") {

		//create arrowhead reference
		m1.setAttribute("id", "arrow");
		m1.setAttribute("viewBox", "0 0 10 10");
		m1.setAttribute("refX", 0);
		m1.setAttribute("refY", 5);
		m1.setAttribute("markerUnits", "strokeWidth");
		m1.setAttribute("markerWidth", 4);
		m1.setAttribute("markerHeight", 3);
		m1.setAttribute("orient", "auto");
		m1.setAttribute("fill", this.fill);
	
		//create arrowhead path
		var a1 = document.createElementNS("http://www.w3.org/2000/svg","path");
		a1.setAttribute("d","M 0 0 L 10 5 L 0 10 z");
		m1.appendChild(a1);
	
		//append to definition
		d1.appendChild(m1);
		
		if (this.props=="start") {
			//place arrow at start
			c1.setAttribute("marker-start","url(#arrow)");
		} else if (this.props=="end") {
			//place arrow at end
			c1.setAttribute("marker-end","url(#arrow)");
		} else if (this.props=="both") {
			//place arrow at either end
	    	c1.setAttribute("marker-start","url(#arrow)");
	    	c1.setAttribute("marker-end","url(#arrow)");
		} 

	}

	//append to the canvas and render
	g1.setAttribute("id",id+"g");
	g1.appendChild(d1);
	g1.appendChild(t1);
	g1.appendChild(c1);
	contentarea.appendChild(g1);

}

};
}}$;


${{
Path.prototype.toString = function() {
  return "Path(" + this.name + ", " + this.start + ", " + this.end + ", "+this.marker+", "+this.fill+", "+this.stroke+", "+this.props+")";
};
}}$;

/**
 * Layer function groups elements to allow for the application of global operations.
 *
 * @param name, name of path
 * @param x, x coordinate of the layer
 * @param y, y coordinate of the layer
 * @param elements, elements to group within the layer
 * @param style, style attributes to apply to the layer
 */

${{
Layer = function (name, x, y, elements, style) {
	this.name = name;
	this.x = x;
	this.y = y;
	this.elements = elements;
	this.style = style;
}
}}$;

func Layer { ${{
  var name = arguments[0];
  var x = arguments[1];
  var y = arguments[2];
  var elements = arguments[3];
  var style = arguments[4];
  return new Layer(name, x, y, elements, style);
}}$; }

${{
Layer.prototype.draw = function(id) {

  var contentarea = document.getElementById("svgcanvas"); 
  var ids=[];
  //deconstruct element list somewhere here
    
 	 	if (this.elements!="") {
  
  			//splitting of elements within the context ofupdating an existing group
  			ids = this.elements.split("[")[1].split("]")[0].split(",");
	
  		}
  		
  	    if(contentarea.getElementById(this.name)) {
			//get grouping
			g1 = document.getElementById(this.name);
			g1.setAttribute("id", this.name);
			g1.setAttribute("transform", "translate("+this.x+","+this.y+")");
			g1.setAttribute("style", this.style);
			
			//delete all children in grouping and replace with new children
			g1.innerHTML = '';

			//append elements
			for (var i = 0; i < ids.length; i++) {
				g1.appendChild(document.getElementById(ids[i]));
			}
			
		
		} else {
		
			//splitting of elements within the context of creating a new group
		
		 	if (this.elements!="") {
  
  				ids = this.elements.split("[")[1].split("]")[0].split(",");
	
  			}
		
			var g1 = document.createElementNS("http://www.w3.org/2000/svg", "g");
			//set attributes
			g1.setAttribute("id", this.name);
			g1.setAttribute("transform", "translate("+this.x+","+this.y+")");
			g1.setAttribute("style", this.style);
			
			//append elements
			for (var i = 0; i < ids.length; i++) {
			try {
				g1.appendChild(document.getElementById(ids[i]));
			} catch (err) {
				console.log("Invalid elements defined.");
			}
			
			}
			
			contentarea.appendChild(g1);
		
		}
  
};
}}$;

${{
Layer.prototype.toString = function() {
  return "Layer(" + this.name + ", " + this.x + ", " + this.y + ", "+this.elements+", "+this.style+")";
};
}}$;

/*SVG FOREIGN OBJECT COMPONENTS #############################################*/

/*BUTTON#############################################*/

${{
Button = function (name, label, x, y, enabled) {
	this.name = name;
	this.label = label;
	this.x = x;
	this.y = y;
	this.enabled = enabled;
}
}}$;

func Button { ${{
  var name = arguments[0];
  var label = arguments[1];
  var x = arguments[2];
  var y = arguments[3];
  var enabled = arguments[4];
  return new Button(name, label, x, y, enabled);
}}$; }

${{
Button.prototype.draw = function(id) {

var contentarea = document.getElementById("svgcanvas");

  //define button id
  var me = id;
  var me2 = this.name;
  
  //define div for button id
  var but = $("#"+me).get(0);
  
  if (but === undefined) {
  	//NEW BUTTON DEFINITION
	var dis = "";
	if (this.enabled == true) { dis = ""; }
	else { dis = "disabled=\"disabled\""; }
	
	//create foreign object placeholder
	var fo1 = document.createElementNS("http://www.w3.org/2000/svg", "foreignObject");
	fo1.setAttribute("id", id);
	fo1.setAttribute("x", this.x);
	fo1.setAttribute("y", this.y);
	fo1.setAttribute("width", 100);
	fo1.setAttribute("height", 50);

	//create html button
	var buthtml = $("<input type=\"button\" id=\"" + me + "\" value=\"" + this.label + "\" " + dis + "></input").click(function() {
		root.lookup(me2 + "_clicked").assign(true);
	}).appendTo(fo1);

	buthtml.get(0).togarbage = false;

	//Initialise
	
	root.lookup(me2 + "_clicked").assign(false);
	contentarea.appendChild(fo1);
  } else {
  		//REDEFINITION OF AN EXISTING BUTTON 
  		var svgcan = document.getElementById("svgcanvas");
  		var fo1 = svgcan.getElementById(id);
  		  	  		
		but.value = this.label;
		but.togarbage = false;
		if (this.enabled == false) { 
			but.disabled = true; 
			fo1.childNodes[0].setAttribute("disabled","disabled");
		}
		else 
		{ 
			but.disabled = false; 
			fo1.childNodes[0].removeAttribute("disabled");
		}
		but.style.left = "" + this.x + "px";
		but.style.top = "" + this.y + "px";
  }
};
}}$;
${{
Button.prototype.toString = function() {
  return "Button(" + this.name + ", " + this.label + ", " + this.x + ", "+this.y+", "+this.enabled+")";
};
}}$;


/*COMBOBOX#############################################*/

${{
Combobox = function (name, options, x, y, enabled) {
	this.name = name;
	this.options = options;
	this.x = x;
	this.y = y;
	this.enabled = enabled;
}

function makeoptionshtml(opts) {
	var html = "";
	for (x in opts) {
		html = html + "\n<option value=\""+ opts[x] + "\">"+ opts[x] + "</option>";
	}
	return html;
}
}}$;

func Combobox { ${{
  var name = arguments[0];
  var options = arguments[1];
  var x = arguments[2];
  var y = arguments[3];
  var enabled = arguments[4];
  return new Combobox(name, options, x, y, enabled);
}}$; }

${{
Combobox.prototype.draw = function(id) {

var contentarea = document.getElementById("svgcanvas");

  var me = id;
  var me2 = this.name;
  var box = $("#"+me).get(0);
  if (box === undefined) {
	var dis = "";
	if (this.enabled == true) { dis = ""; }
	else { dis = "disabled=\"true\""; }
	
	//create foreign object placeholder
	var fo1 = document.createElementNS("http://www.w3.org/2000/svg", "foreignObject");
	fo1.setAttribute("id", id);
	fo1.setAttribute("x", this.x);
	fo1.setAttribute("y", this.y);
	fo1.setAttribute("width", 200);
	fo1.setAttribute("height", 100);

	var boxhtml = $("<select id=\"" + me + "\" " + dis + " style=\"position: absolute; left: " + this.x + "px; top: " + this.y + "px;\"></select>");

	boxhtml.html(makeoptionshtml(this.options));

	boxhtml.change(function() {
		root.lookup(me2 + "_value").assign(boxhtml.get(0).value);
	}).appendTo(fo1);

	boxhtml.get(0).togarbage = false;

	//Initialise
	root.lookup(me2 + "_value").assign(this.options[0]);
  } else {
	$(box).html(makeoptionshtml(this.options));
	box.togarbage = false;

	if (this.enabled == true) { box.disabled = false; }
	else { box.disabled = true; }
	box.style.left = "" + this.x + "px";
	box.style.top = "" + this.y + "px";
  }
  
    contentarea.appendChild(fo1);
  
};
}}$;
${{
Combobox.prototype.toString = function() {
  return "Combobox(" + this.name + ", " + this.options + ", " + this.x + ", "+this.y+", "+this.enabled+")";
};
}}$;

/*HTML DIV#############################################*/

${{
Div = function (name, x, y, width, height, html, style) {
	this.name = name;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.html = html;
	this.style = style;
}
}}$;

func Div { ${{
  var name = arguments[0];
  var x = arguments[1];
  var y = arguments[2];
  var width = arguments[3];
  var height = arguments[4];
  var html = arguments[5];
  var style = arguments[6];
  return new Div(name, x, y, width, height, html, style);
}}$; }

${{
Div.prototype.draw = function(id) {

  var contentarea = document.getElementById("svgcanvas");
  
  var me = id;
  var me2 = this.name;
  var but = $("#"+me).get(0);

  if (but === undefined) {
	var dis = "";
	if (this.enabled == true) { dis = ""; }
	else { dis = "disabled=\"true\""; }
	
	//create foreign object placeholder
	var fo1 = document.createElementNS("http://www.w3.org/2000/svg", "foreignObject");
	fo1.setAttribute("id", id);
	fo1.setAttribute("x", this.x);
	fo1.setAttribute("y", this.y);
	fo1.setAttribute("width", this.width);
	fo1.setAttribute("height", this.height);

	var divstyle = "position: absolute; left: " + this.x + "px; top: " + this.y + "px; width: " + this.width + "px; height: " + this.height + "px;";
	if (this.style !== undefined) {
		divstyle = divstyle + this.style;
	}
	var buthtml = $("<div id=\"" + me + "\" style=\""+divstyle+"\">" + this.html + "</div>").appendTo(fo1);

	//.click(function() {
	//	root.lookup(me2 + "_clicked").assign(true); root.lookup(me2 + "_clicked").assign(false);
	//}).appendTo(can);

	buthtml.get(0).togarbage = false;

	//Initialise
	//root.lookup(me2 + "_clicked").assign(false);
  } else {
	//but.value = this.label;
	but.innerHTML = this.html;
	but.togarbage = false;
	but.style.width = "" + this.width + "px";
	but.style.height = "" + this.height + "px";
	but.style.left = "" + this.x + "px";
	but.style.top = "" + this.y + "px";
  }
  
  contentArea.appendChild(fo1);
  
};
}}$;
${{
Div.prototype.toString = function() {
  return "Div(" + this.name + ", " + this.x + ", "+this.y+", ...)";
};
}}$;

/*SVG IMG SRC#############################################*/

${{
Image = function (name, x, y, width, height, file) {
	this.name = name;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.file = file;
}
}}$;

func Image { ${{
  var name = arguments[0];
  var x = arguments[1];
  var y = arguments[2];
  var width = arguments[3];
  var height = arguments[4];
  var file = arguments[5];
  return new Image(name, x, y, width, height, file);
}}$; }

${{
Image.prototype.draw = function(id) {

  var contentarea = document.getElementById("svgcanvas");  
  
  	if(contentarea.getElementById(id)) {
  		//update existing
  		var i1 = contentarea.getElementById(id);
  		i1.setAttribute("x", this.x);
  		i1.setAttribute("y", this.y);
  		i1.setAttribute("width", this.width);
  		i1.setAttribute("height", this.height);
  		i1.setAttributeNS("http://www.w3.org/1999/xlink", 'href', this.file);
  	} else {
  		//delete any not referenced/create new references  		
  		var i1 = document.createElementNS("http://www.w3.org/2000/svg", "image");
  		i1.setAttribute("id", id);
  		i1.setAttribute("x", this.x);
  		i1.setAttribute("y", this.y);
  		i1.setAttribute("width", this.width);
  		i1.setAttribute("height", this.height)
  		i1.setAttributeNS("http://www.w3.org/1999/xlink", 'href', this.file);

  		contentarea.appendChild(i1);
  		
  	}
  
};
}}$;
${{
Image.prototype.toString = function() {
  return "Image(" + this.name + ", " + this.x + ", "+this.y+", ...)";
};
}}$;

/*HTML SLIDER#############################################*/

${{
Slider = function(name, min, max, step, value, orientation, x, y) {
  this.name = name;
  this.min = min;
  this.max = max;
  this.step = step;
  this.value = value;
  this.orientation = orientation;
  this.x = x;
  this.y = y;
}
}}$;

func Slider { ${{
  var name = arguments[0];
  var min = arguments[1];
  var max = arguments[2];
  var step = arguments[3];
  var value = arguments[4];
  var orientation = arguments[5];
  var x = arguments[6];
  var y = arguments[7];
  return new Slider(name, min, max, step, value, orientation, x, y);
}}$; }

${{
Slider.prototype.draw = function(id) {

  var contentarea = document.getElementById("svgcanvas");  

  var me = id;
  var me2 = this.name;
  var sli = $("#"+me).get(0);

  var value = this.value;
  var max = this.max;
  var min = this.min
  var step = this.step;
  var orientation = this.orientation;

  if (sli === undefined) {

	//create foreign object placeholder
	var fo1 = document.createElementNS("http://www.w3.org/2000/svg", "foreignObject");
	fo1.setAttribute("id", id);
	fo1.setAttribute("width", 200);
	fo1.setAttribute("height", 200);

    var slihtml = $('<div id="'+me+'" style="position: absolute; left: '+ this.x +'px; top: '+ this.y +'px;"><label for="'+me+'-amount">'+this.name+':</label><input type="range" id="'+me+'-amount" min="'+min+'" max="'+max+'" step="'+step+'" value="'+value+'" style="border:0; color:#f6931f; font-weight:bold;" /><div id="'+me+'-slider-range"></div></div>').appendTo(fo1);

    $(function() {
      $( "#"+me+"-slider-range" ).slider({
        slide: function( event, ui ) {
          $( "#"+me+"-amount" ).val( ui.value );
          root.lookup(me2 + "_value").assign(ui.value);
      }});
      $( "#"+me+"-slider-range" ).slider( "option", "max", max );
      $( "#"+me+"-slider-range" ).slider( "option", "min", min );
      $( "#"+me+"-slider-range" ).slider( "option", "step", step );
      $( "#"+me+"-slider-range" ).slider( "option", "value", value );
      $( "#"+me+"-slider-range" ).slider( "option", "orientation", orientation );
      $( "#"+me+"-amount" ).val( "$" + $( "#"+me+"slider-range" ).slider( "values", value ) );
    });
    
   	//$( "#"+me+"-amount" ).val( $( "#"+me+"-slider-range" ).slider( "value" ) );

    slihtml.get(0).togarbage = false;

    //Initialise
    root.lookup(me2 + "_value").assign(value);
    $( "#"+me+"-amount" ).val( value );
  } else {
    sli.togarbage = false;
    sli.value = $( "#"+me+"slider-range" ).slider( "values", 0 );
    $( "#"+me+"-slider-range" ).slider( "option", "max", max );
    $( "#"+me+"-slider-range" ).slider( "option", "min", min );
    $( "#"+me+"-slider-range" ).slider( "option", "step", step );
    // $( "#"+me+"-slider-range" ).slider( "option", "value", value );
    $( "#"+me+"-slider-range" ).slider( "option", "orientation", orientation );
    sli.style.left = "" + this.x + "px";
    sli.style.top = "" + this.y + "px";
  }
  
    contentarea.appendChild(fo1);

};
}}$;

${{
Slider.prototype.toString = function() {
  return "Slider("+this.name+", "+this.min+", "+this.max+", "+this.step+", "+this.default+", "+this.orientation+", "+this.x+", "+this.y+")";
};
}}$;

func TestDraw {
	return 77;
}

## Arc

${{
Arc = function(x1, y1, x2, y2, rotation, largearc, clockwise, style) {
  this.x1 = x1;
  this.y1 = y1;
  this.x2 = x2;
  this.y2 = y2;
  this.rotation = rotation;
  this.largearc = largearc;
  this.clockwise = clockwise;
  this.style = style;
}
}}$;

func Arc { ${{
/*
Arc defines a class of arc based paths
--------------------------------------
//-curveto
//-quadratic bezier
//-elliptical arc
*/

  var x1 = arguments[0];
  var y1 = arguments[1];
  var x2 = arguments[2];
  var y2 = arguments[3];
  var rotation = arguments[4];
  var largearc = arguments[5];
  var clockwise = arguments[6];
  var style = arguments[7];
  return new Arc(x1, y1, x2, y2, rotation, largearc, clockwise, style);
}}$; };

${{
Arc.prototype.draw = function(id) {

  //svg implementation goes here
  
  var contentarea = document.getElementById("svgcanvas");  
  
	if(contentarea.getElementById(id)) {
  		var p1 = contentarea.getElementById(id);
  		p1.setAttribute("d","M "+this.x1+" "+this.y1+" a "+this.rotation+" "+this.largearc+" "+this.clockwise+" "+this.x2+" "+this.y2);
		p1.setAttribute("style", this.style);

  	} else {
  		//delete any not referenced/create new references  		
  		var p1 = document.createElementNS("http://www.w3.org/2000/svg", "path");
  		p1.setAttribute("id",id);
  		p1.setAttribute("d","M "+this.x1+" "+this.y1+" a "+this.rotation+" "+this.largearc+" "+this.clockwise+" "+this.x2+" "+this.y2);
		p1.setAttribute("style", this.style);
  		contentarea.appendChild(p1);
  		
  	}
  	
};

Arc.prototype.toString = function() {
  return "Arc(" + this.x1 + "," + this.y1 + "," + this.x2 + "," + this.y2 + "," + this.rotation + "," + this.largearc+ "," +this.clockwise+ "," +this.style+")";
}
}}$;

## Sylvester library object wrappers
## Unsure about Line so ignored for now

## Vector

func Vector { ${{
  return $V(arguments[0]);
}}$; };

${{
Vector.prototype.toString = function() {
  return "Vector("+this.inspect()+")";
};

}}$;

## Matrix

func Matrix { ${{
  return $M(arguments[0]);
}}$; };

${{  
Matrix.prototype.toString = function() {
  return "[" + this.inspect() + "]";
};
}}$;

## Plane

func Plane { ${{
  return $P(arguments[0]);
}}$; };

## Canvas stuff
canvas is ${{ {width: $('#eden-content').width()-40, height:$('#tabs').height()-80, currentscale: 1}; }}$;

## When the user updates the canvas observable, the canvas gets resized
proc updateCanvas : canvas { ${{
	var canvas = root.lookup('canvas');
	$("#svgcanvas").attr("width", canvas.value().width);
	$("#svgcanvas").attr("height", canvas.value().height);
	$("#svgcanvas").attr("currentscale", canvas.value().currentscale);
}}$;
	drawPicture();
}


/* SVG CANVAS METHODS############################################# */

proc clearCanvas { ${{
  //arguably redundant for svg elements
  var svgcanvas = document.getElementById("svgcanvas");
  canvas.width = canvas.width;

	//all elements that are in eden-content and not in canvas need to be removed.
  $("#eden-content > :not(canvas)").each(function() {
	if(/canvas_/.test(this.id)) {
		this.togarbage = true;
	}
  });

}}$; };

proc cleanupCanvas { ${{

  $("#eden-content > :not(canvas)").each(function() {
	if (this.togarbage == true) {
		$(this).remove();
	}
  });
}}$; };

picture = [];

proc drawPicture : picture { 

  ${{
  //svg canvas and observable lookup.
  var contentarea = document.getElementById("svgcanvas");
  
  //clear canvas
  contentarea.innerHTML = '';
  
  var activeelements = contentarea.getElementsByTagName("*");
  var picture = context.lookup('picture').value();
  
  //get ids using codemirror get function
  var idarea = document.getElementById("txtarea").value;
  var array = [];
  var ids = [];
  
  //if no active elements, just plot what you have been told to.
  if(activeelements.length===0) {
     	
    if (idarea.search("picture")!=-1) {
	//this needs to use regex as not currently working

    	//we have new picture config to draw
    	ids = idarea.split("[")[1].split("]")[0].split(",")
    	
  			for (var i = 0; i < ids.length; i++) {
    			if (picture[i] === undefined) { continue; }
  				picture[i].draw(ids[i]);
  			}
  	} else {
  	
  		//a model must have been triggered
  		  	for (var i = 0; i < picture.length; i++) {
    			if (picture[i] === undefined) { continue; }
  				picture[i].draw(Math.random());
  			}
  	
  	}
  
  //if active elements, update the appropriate picture with regards to the correct active element.
  
  } else {
  	
    if (idarea.search("picture")!=-1) {
    //we have new picture config to draw
    	ids = idarea.split("[")[1].split("]")[0].split(",");
  	}
  	
	//convert activeelements nodelist to array  	
  	for (var i = activeelements.length >>> 0; i--;) { 
    	array[i] = activeelements[i].id;
  	}
  	
  	//check if we have any new picture definitions along with our active elements, union def postings.
  	var defs = _.union(ids, array);
  	
  	for (var i = 0; i < defs.length; i++) {
		
		try{
			//Undefined check
	    	if (picture[i] === undefined) { continue; }
	    	//Similarity check
	    	if (array.indexOf(defs[i])==-1) {
  				picture[i].draw(defs[i]);
  			} else {
  				picture[i].draw(defs[i]);
  			}
  			
		} catch(err) {
			console.log(defs[i].id);
		}
	
 	 }
  }
  
  }}$;
};

${{

function assignTriggers(element, id) {

/*Javascript function to define triggers on svg elements for various different inputs*/

	var canvas = document.getElementById("svgcanvas");
	
     //Click Function
	 var buthtml = $(element).click(function() {
		root.lookup(id + "_clicked").assign(true);
	 }).appendTo(canvas);
     //Initialise
	 root.lookup(id + "_clicked").assign(false);
	 
	 //Mouseover Function
	 var buthtml = $(element).mouseover(function() {
		root.lookup(id + "_mouseover").assign(true);
	 }).appendTo(canvas);
     //Initialise
	 root.lookup(id + "_mouseover").assign(false);

}

}}$;

